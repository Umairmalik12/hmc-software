{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/Services/indexed-db.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/datepicker\";\nfunction LabEditComponent_form_2_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Only alphabets are allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Phone number is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid phone number\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const test_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", test_r12.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(test_r12.viewValue);\n  }\n}\nfunction LabEditComponent_form_2_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Test name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Price is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Doctor name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Only alphabets are allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_mat_error_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Date & Time is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function LabEditComponent_form_2_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"mat-dialog-content\")(2, \"div\", 3)(3, \"mat-form-field\", 4)(4, \"mat-label\");\n    i0.ɵɵtext(5, \"Patient ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-form-field\", 4)(8, \"mat-label\");\n    i0.ɵɵtext(9, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 6);\n    i0.ɵɵtemplate(11, LabEditComponent_form_2_mat_error_11_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵtemplate(12, LabEditComponent_form_2_mat_error_12_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-form-field\", 4)(14, \"mat-label\");\n    i0.ɵɵtext(15, \"Phone Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 8);\n    i0.ɵɵtemplate(17, LabEditComponent_form_2_mat_error_17_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵtemplate(18, LabEditComponent_form_2_mat_error_18_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"mat-form-field\", 4)(20, \"mat-label\");\n    i0.ɵɵtext(21, \"Test Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"mat-select\", 9);\n    i0.ɵɵtemplate(23, LabEditComponent_form_2_mat_option_23_Template, 2, 2, \"mat-option\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, LabEditComponent_form_2_mat_error_24_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"mat-form-field\", 4)(26, \"mat-label\");\n    i0.ɵɵtext(27, \"Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(28, \"input\", 11);\n    i0.ɵɵtemplate(29, LabEditComponent_form_2_mat_error_29_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"mat-form-field\", 4)(31, \"mat-label\");\n    i0.ɵɵtext(32, \"Suggested Doctor Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(33, \"input\", 12);\n    i0.ɵɵtemplate(34, LabEditComponent_form_2_mat_error_34_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵtemplate(35, LabEditComponent_form_2_mat_error_35_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"mat-form-field\", 4)(37, \"mat-label\");\n    i0.ɵɵtext(38, \"Date & Time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(39, \"input\", 13)(40, \"mat-datepicker-toggle\", 14)(41, \"mat-datepicker\", null, 15);\n    i0.ɵɵtemplate(43, LabEditComponent_form_2_mat_error_43_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(44, \"mat-dialog-actions\")(45, \"button\", 16);\n    i0.ɵɵtext(46, \"Submit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(47, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function LabEditComponent_form_2_Template_button_click_47_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.close());\n    });\n    i0.ɵɵtext(48, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const _r10 = i0.ɵɵreference(42);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.labPatientForm);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.name.errors == null ? null : ctx_r0.c.name.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.name.errors == null ? null : ctx_r0.c.name.errors.pattern);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.phone.errors == null ? null : ctx_r0.c.phone.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.phone.errors == null ? null : ctx_r0.c.phone.errors.pattern);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.testList);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.testName.errors == null ? null : ctx_r0.c.testName.errors.required);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.price.errors == null ? null : ctx_r0.c.price.errors.required);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.suggestedDr.errors == null ? null : ctx_r0.c.suggestedDr.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.suggestedDr.errors == null ? null : ctx_r0.c.suggestedDr.errors.pattern);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matDatepicker\", _r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r10);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.c.dateTime.errors == null ? null : ctx_r0.c.dateTime.errors.required);\n  }\n}\nexport let LabEditComponent = /*#__PURE__*/(() => {\n  class LabEditComponent {\n    constructor(fb, dialogRef, labTestDetails, indexedDbService) {\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.indexedDbService = indexedDbService;\n      this.edit = false;\n      this.testList = [{\n        value: 'rpm',\n        viewValue: 'RPM'\n      }, {\n        value: 'hb',\n        viewValue: 'H/B'\n      }, {\n        value: 'cue',\n        viewValue: 'CUE'\n      }, {\n        value: 'rbs',\n        viewValue: 'RBS'\n      }, {\n        value: 'cbc',\n        viewValue: 'CBC'\n      }, {\n        value: 'se',\n        viewValue: 'S/E'\n      }, {\n        value: 'uric_acid',\n        viewValue: 'Uric Acid'\n      }, {\n        value: 'anti_hcv',\n        viewValue: 'Anti-HCV'\n      }, {\n        value: 'hbs_ag',\n        viewValue: 'HBS AG'\n      }, {\n        value: 'psa',\n        viewValue: 'PSA'\n      }, {\n        value: 'blood_group',\n        viewValue: 'Blood Group'\n      }, {\n        value: 'cross_match',\n        viewValue: 'Cross Match'\n      }, {\n        value: 'lfts',\n        viewValue: 'LFTs'\n      }, {\n        value: 'lipo_profile',\n        viewValue: 'Lipo-Profile'\n      }, {\n        value: 'xray',\n        viewValue: 'X-ray'\n      }];\n      this.labTestDetails = labTestDetails;\n      this.edit = !!(labTestDetails === null || labTestDetails === void 0 ? void 0 : labTestDetails.patientId);\n    }\n    ngOnInit() {\n      var _a, _b, _c, _d, _e, _f;\n      return __awaiter(this, void 0, void 0, function* () {\n        const draft = yield this.indexedDbService.getItem('labFormDraft');\n        this.labPatientForm = this.fb.group({\n          patientId: [{\n            value: this.labTestDetails.patientId || (draft === null || draft === void 0 ? void 0 : draft.patientId) || Math.floor(100000 + Math.random() * 900000),\n            disabled: true\n          }],\n          name: [((_a = this.labTestDetails) === null || _a === void 0 ? void 0 : _a.name) || (draft === null || draft === void 0 ? void 0 : draft.name) || '', [Validators.required, Validators.pattern('[a-zA-Z ]+')]],\n          phone: [((_b = this.labTestDetails) === null || _b === void 0 ? void 0 : _b.phone) || (draft === null || draft === void 0 ? void 0 : draft.phone) || '', [Validators.required, Validators.pattern('^[0-9]{10,15}$')]],\n          testName: [((_c = this.labTestDetails) === null || _c === void 0 ? void 0 : _c.testName) || (draft === null || draft === void 0 ? void 0 : draft.testName) || '', Validators.required],\n          price: [((_d = this.labTestDetails) === null || _d === void 0 ? void 0 : _d.price) || (draft === null || draft === void 0 ? void 0 : draft.price) || '', Validators.required],\n          suggestedDr: [((_e = this.labTestDetails) === null || _e === void 0 ? void 0 : _e.suggestedDr) || (draft === null || draft === void 0 ? void 0 : draft.suggestedDr) || '', [Validators.required, Validators.pattern('[a-zA-Z ]+')]],\n          dateTime: [((_f = this.labTestDetails) === null || _f === void 0 ? void 0 : _f.dateTime) ? formatDate(this.labTestDetails.dateTime, 'yyyy-MM-dd', 'en') : (draft === null || draft === void 0 ? void 0 : draft.dateTime) || '', Validators.required]\n        });\n        // Safe subscription after form is initialized\n        this.labPatientForm.valueChanges.subscribe(value => __awaiter(this, void 0, void 0, function* () {\n          const raw = this.labPatientForm.getRawValue(); // includes disabled fields\n          yield this.indexedDbService.setItem('labFormDraft', Object.assign(Object.assign({}, value), {\n            patientId: raw === null || raw === void 0 ? void 0 : raw.patientId\n          }));\n        }));\n      });\n    }\n    get c() {\n      return this.labPatientForm.controls;\n    }\n    onSubmit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.labPatientForm.valid) {\n          const confirmed = this.labPatientForm.dirty ? confirm('Submitting Patient Form') : true;\n          if (confirmed) {\n            this.labPatientForm.enable(); // Enable before reading all values\n            const newPatient = this.getFormattedLabPatientData();\n            // Retrieve existing list\n            const existingList = (yield this.indexedDbService.getItem('labPatients')) || [];\n            let updatedList;\n            if (this.edit) {\n              // Replace the existing patient entry by ID\n              updatedList = existingList.map(p => p.patientId === newPatient.patientId ? newPatient : p);\n            } else {\n              // Add new patient to the list\n              updatedList = [...existingList, newPatient];\n            }\n            // Save updated list\n            yield this.indexedDbService.setItem('labPatients', updatedList);\n            // Clear draft\n            yield this.indexedDbService.removeItem('labFormDraft');\n            this.dialogRef.close(newPatient);\n            // Optional: Consider reloading via parent component, not here\n            window.location.reload();\n          }\n        }\n      });\n    }\n    close() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const confirmed = this.labPatientForm.dirty ? confirm('Closing Without Saving Changes') : true;\n        if (confirmed) {\n          this.dialogRef.close();\n        }\n      });\n    }\n    getFormattedLabPatientData() {\n      const raw = this.labPatientForm.getRawValue(); // includes disabled values like patientId\n      return {\n        patientId: raw.patientId,\n        name: raw.name,\n        phone: raw.phone,\n        testName: raw.testName,\n        price: raw.price,\n        suggestedDr: raw.suggestedDr,\n        dateTime: raw.dateTime\n      };\n    }\n  }\n  LabEditComponent.ɵfac = function LabEditComponent_Factory(t) {\n    return new (t || LabEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.IndexedDbService));\n  };\n  LabEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LabEditComponent,\n    selectors: [[\"app-lab-edit\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[\"mat-dialog-title\", \"\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"outer-input-section\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"patientId\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"name\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"tel\", \"formControlName\", \"phone\"], [\"formControlName\", \"testName\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"price\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"suggestedDr\"], [\"matInput\", \"\", \"formControlName\", \"dateTime\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"type\", \"button\", 3, \"click\"], [3, \"value\"]],\n    template: function LabEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, LabEditComponent_form_2_Template, 49, 13, \"form\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.edit ? \"Update Lab Patient Data\" : \"Add New Lab Patient\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.labPatientForm);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.MatButton, i6.MatFormField, i6.MatLabel, i6.MatError, i6.MatSuffix, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i7.MatInput, i8.MatSelect, i9.MatOption, i2.MatDialogTitle, i2.MatDialogContent, i2.MatDialogActions, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle],\n    styles: [\".outer-input-section[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:sp;margin:5px 0;flex-wrap:wrap}.input-section[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;margin:5px 0;flex-wrap:wrap}.input-section[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{flex-grow:1;margin:0 20px}.title[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:flex-start;margin-bottom:10px;font-size:20px;font-weight:500}.radio-group[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:last-child){margin-right:5px;margin-bottom:10px}\"]\n  });\n  return LabEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}