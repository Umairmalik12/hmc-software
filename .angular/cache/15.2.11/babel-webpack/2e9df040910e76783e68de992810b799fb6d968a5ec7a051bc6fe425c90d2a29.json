{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./opd.service\";\nexport let OpdDataService = /*#__PURE__*/(() => {\n  class OpdDataService {\n    constructor(opdService) {\n      this.opdService = opdService;\n      this.opdSubject = new BehaviorSubject([]);\n    }\n    loadPatient(filter, sortDirection, pageIndex, pageSize) {\n      this.opdService.findOpds(filter, sortDirection, pageIndex, pageSize).pipe(catchError(() => of([]))).subscribe(opd => this.opdSubject.next(opd));\n    }\n    connect(collectionViewer) {\n      return this.opdSubject.asObservable();\n    }\n    disconnect(collectionViewer) {\n      this.opdSubject.complete();\n    }\n  }\n  OpdDataService.ɵfac = function OpdDataService_Factory(t) {\n    return new (t || OpdDataService)(i0.ɵɵinject(i1.OpdService));\n  };\n  OpdDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OpdDataService,\n    factory: OpdDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return OpdDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}