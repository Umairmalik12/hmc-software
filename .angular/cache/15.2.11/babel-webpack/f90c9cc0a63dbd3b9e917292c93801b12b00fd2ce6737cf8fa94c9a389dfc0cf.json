{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./indexed-db.service\";\nexport let LabService = /*#__PURE__*/(() => {\n  class LabService {\n    constructor(indexedDbService) {\n      this.indexedDbService = indexedDbService;\n      this.total = 0;\n      this.labDetail = [];\n      this.loadLabData();\n    }\n    loadLabData() {\n      this.indexedDbService.getItem('labDetails').then(data => {\n        this.labDetail = data !== null && data !== void 0 ? data : [];\n      });\n    }\n    saveLabData() {\n      return this.indexedDbService.setItem('labDetails', this.labDetail);\n    }\n    getAllLabPatient() {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(data => {\n          this.labDetail = data !== null && data !== void 0 ? data : [];\n          this.total = this.labDetail.length;\n          observer.next(this.labDetail);\n          observer.complete();\n        }).catch(err => observer.error(err));\n      });\n    }\n    findLabPatients(filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 5) {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(data => {\n          this.labDetail = data !== null && data !== void 0 ? data : [];\n          this.total = this.labDetail.length;\n          let start = pageNumber * pageSize;\n          let end = Math.min(start + pageSize, this.labDetail.length);\n          let paginated = this.labDetail.slice(start, end);\n          observer.next(paginated);\n          observer.complete();\n        }).catch(err => observer.error(err));\n      });\n    }\n    getLabPatientDetails(id) {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(data => {\n          this.labDetail = data !== null && data !== void 0 ? data : [];\n          const patient = this.labDetail.find(o => o.patientId === id);\n          observer.next(patient);\n          observer.complete();\n        }).catch(err => observer.error(err));\n      });\n    }\n    addNewLabPatient(data) {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(stored => {\n          var _a;\n          this.labDetail = stored !== null && stored !== void 0 ? stored : [];\n          const id = this.labDetail.length > 0 ? ((_a = this.labDetail[this.labDetail.length - 1].patientId) !== null && _a !== void 0 ? _a : 0) + 1 : 1;\n          data.patientId = id;\n          this.labDetail.push(data);\n          this.saveLabData().then(() => {\n            observer.next(true);\n            observer.complete();\n          }).catch(err => observer.error(err));\n        }).catch(err => observer.error(err));\n      });\n    }\n    updateLabPatient(data) {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(stored => {\n          this.labDetail = stored !== null && stored !== void 0 ? stored : [];\n          const index = this.labDetail.findIndex(o => o.patientId === data.patientId);\n          if (index !== -1) {\n            this.labDetail[index] = data;\n            this.saveLabData().then(() => {\n              observer.next(true);\n              observer.complete();\n            }).catch(err => observer.error(err));\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        }).catch(err => observer.error(err));\n      });\n    }\n    getLabPatientBrief() {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(data => {\n          const list = (data !== null && data !== void 0 ? data : []).map(p => ({\n            patientId: p.patientId,\n            name: p.name,\n            phone: p.phone,\n            testName: p.testName,\n            price: p.price,\n            suggestedDr: p.suggestedDr,\n            dateTime: p.dateTime\n          }));\n          this.labDetail = list;\n          observer.next(list);\n          observer.complete();\n        }).catch(err => observer.error(err));\n      });\n    }\n    deleteLabPatient(id) {\n      return new Observable(observer => {\n        this.indexedDbService.getItem('labDetails').then(data => {\n          this.labDetail = data !== null && data !== void 0 ? data : [];\n          const index = this.labDetail.findIndex(p => p.patientId === id);\n          if (index !== -1) {\n            this.labDetail.splice(index, 1);\n            this.saveLabData().then(() => {\n              observer.next(true);\n              observer.complete();\n            }).catch(err => observer.error(err));\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        }).catch(err => observer.error(err));\n      });\n    }\n  }\n  LabService.ɵfac = function LabService_Factory(t) {\n    return new (t || LabService)(i0.ɵɵinject(i1.IndexedDbService));\n  };\n  LabService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LabService,\n    factory: LabService.ɵfac,\n    providedIn: 'root'\n  });\n  return LabService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}