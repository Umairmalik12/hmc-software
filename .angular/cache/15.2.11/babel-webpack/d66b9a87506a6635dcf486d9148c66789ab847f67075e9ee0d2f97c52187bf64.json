{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { defer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./indexed-db.service\";\nexport let OpdService = /*#__PURE__*/(() => {\n  class OpdService {\n    constructor(dbService) {\n      this.dbService = dbService;\n      this.total = 0;\n      this.opdDetail = [];\n    }\n    loadOpdData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const storedOpd = yield this.dbService.getItem('opdDetails');\n        this.opdDetail = storedOpd !== null && storedOpd !== void 0 ? storedOpd : [];\n      });\n    }\n    savePatientOpdData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"this.opdDetail\", this.opdDetail);\n        yield this.dbService.setItem('opdDetails', this.opdDetail);\n      });\n    }\n    getAllOpd() {\n      return defer(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.loadOpdData();\n        this.total = this.opdDetail.length;\n        return this.opdDetail;\n      }));\n    }\n    findOpds(filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 5) {\n      return defer(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.loadOpdData();\n        this.total = this.opdDetail.length;\n        const start = pageNumber * pageSize;\n        const end = Math.min(start + pageSize, this.opdDetail.length);\n        return this.opdDetail.slice(start, end);\n      }));\n    }\n    getOpdDetails(id) {\n      return defer(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.loadOpdData();\n        const opd = this.opdDetail.find(o => o.patientId === id);\n        return opd;\n      }));\n    }\n    addNewOpd(data) {\n      return this.loadOpdData().then(() => {\n        try {\n          const id = this.opdDetail.length > 0 ? this.opdDetail[this.opdDetail.length - 1].patientId + 1 : 1;\n          data.patientId = id;\n          this.opdDetail.push(data);\n          return this.savePatientOpdData().then(() => true);\n        } catch (e) {\n          console.error('Error adding new OPD:', e);\n          return false;\n        }\n      });\n    }\n    updateOpd(data) {\n      return this.loadOpdData().then(() => {\n        try {\n          const index = this.opdDetail.findIndex(o => o.patientId === data.patientId);\n          if (index !== -1) {\n            this.opdDetail[index] = data;\n            console.log(\"Updated OPD:\", this.opdDetail[index]);\n            return this.savePatientOpdData().then(() => true);\n          }\n          return false;\n        } catch (e) {\n          console.error('Error updating OPD:', e);\n          return false;\n        }\n      });\n    }\n    deleteOpd(id) {\n      return this.loadOpdData().then(() => {\n        try {\n          const index = this.opdDetail.findIndex(opd => opd.patientId === id);\n          if (index !== -1) {\n            this.opdDetail.splice(index, 1);\n            return this.savePatientOpdData().then(() => true);\n          }\n          return false;\n        } catch (e) {\n          console.error('Error deleting OPD:', e);\n          return false;\n        }\n      });\n    }\n  }\n  OpdService.ɵfac = function OpdService_Factory(t) {\n    return new (t || OpdService)(i0.ɵɵinject(i1.IndexedDbService));\n  };\n  OpdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OpdService,\n    factory: OpdService.ɵfac,\n    providedIn: 'root'\n  });\n  return OpdService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}