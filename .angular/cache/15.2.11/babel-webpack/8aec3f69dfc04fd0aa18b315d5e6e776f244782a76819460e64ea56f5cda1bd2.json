{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet PaymentComponent = class PaymentComponent {\n  constructor(fb, indexedDbService) {\n    this.fb = fb;\n    this.indexedDbService = indexedDbService;\n    this.payments = [];\n    this.displayedColumns = ['patientName', 'amount', 'cashGiven', 'cashReturn', 'paymentMethod', 'paymentStatus', 'actions'];\n    this.cashReturn = 0;\n    this.patientId = '';\n  }\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.paymentForm = this.fb.group({\n        patientName: ['', Validators.required],\n        patientId: [{\n          value: this.generatePatientId(),\n          disabled: true\n        }, Validators.required],\n        amount: [null, [Validators.required, Validators.min(0)]],\n        cashGiven: [null, [Validators.required, Validators.min(0)]],\n        paymentMethod: ['', Validators.required],\n        paymentStatus: ['', Validators.required]\n      });\n      // Load payments from IndexedDB\n      yield this.loadPayments();\n      this.paymentForm.valueChanges.subscribe(() => {\n        this.refreshPaymentList();\n      });\n    });\n  }\n  generatePatientId() {\n    const randomId = 'P-' + Math.random().toString(36).substr(2, 9);\n    this.patientId = randomId;\n    return this.patientId;\n  }\n  loadPayments() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storedPayments = yield this.indexedDbService.getItem('payments');\n      this.payments = storedPayments || [];\n    });\n  }\n  calculateCashReturn() {\n    var _a, _b;\n    const amount = ((_a = this.paymentForm.get('amount')) === null || _a === void 0 ? void 0 : _a.value) || 0;\n    const cashGiven = ((_b = this.paymentForm.get('cashGiven')) === null || _b === void 0 ? void 0 : _b.value) || 0;\n    this.cashReturn = cashGiven >= amount ? cashGiven - amount : 0;\n  }\n  processPayment() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.paymentForm.valid) {\n        const paymentData = this.paymentForm.getRawValue(); // Includes disabled fields\n        paymentData.cashReturn = this.cashReturn;\n        paymentData.id = 'pay-' + Math.random().toString(36).substr(2, 9);\n        this.payments.push(paymentData);\n        yield this.indexedDbService.setItem('payments', this.payments);\n        this.paymentForm.reset();\n        this.cashReturn = 0;\n        yield this.refreshPaymentList();\n        this.showReceipt(paymentData);\n      }\n    });\n  }\n  refreshPaymentList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loadPayments();\n    });\n  }\n  showReceipt(payment) {\n    const receiptHTML = `\n      <div style=\"font-family: Arial; padding: 20px; width: 300px; margin: 0 auto; border: 1px solid #ccc; background: #f9f9f9; border-radius: 8px; text-align: center;\">\n        <h2 style=\"color: #0066cc;\">Haqq Medical Center</h2>\n        <p><strong>Payment Receipt</strong></p>\n        <p><strong>Patient Name:</strong> ${payment.patientName}</p>\n        <p><strong>Amount Paid:</strong> Rs${payment.amount}</p>\n        <p><strong>Payment Method:</strong> ${payment.paymentMethod}</p>\n        <p><strong>Payment Status:</strong> ${payment.paymentStatus}</p>\n        <p><strong>Payment Date:</strong> ${new Date().toLocaleString()}</p>\n      </div>\n    `;\n    const newWindow = window.open('', '', 'width=600,height=600');\n    if (newWindow) {\n      newWindow.document.write(receiptHTML);\n      newWindow.document.close();\n      newWindow.print();\n    }\n  }\n  updatePaymentStatus(paymentId, newStatus) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const index = this.payments.findIndex(p => p.id === paymentId);\n      if (index !== -1) {\n        this.payments[index].paymentStatus = newStatus;\n        yield this.indexedDbService.setItem('payments', this.payments);\n        yield this.refreshPaymentList();\n      }\n    });\n  }\n  resetForm() {\n    this.paymentForm.reset();\n    this.cashReturn = 0;\n  }\n};\nPaymentComponent = __decorate([Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})], PaymentComponent);\nexport { PaymentComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}