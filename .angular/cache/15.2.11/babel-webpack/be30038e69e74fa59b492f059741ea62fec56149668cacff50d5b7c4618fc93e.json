{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./patient.service\";\nexport let PatientDataService = /*#__PURE__*/(() => {\n  class PatientDataService {\n    constructor(patientService) {\n      this.patientService = patientService;\n      this.patientSubject = new BehaviorSubject([]);\n    }\n    loadPatient(filter, sortDirection, pageIndex, pageSize) {\n      this.patientService.findPatients(filter, sortDirection, pageIndex, pageSize).pipe(catchError(() => of([]))).subscribe(patient => this.patientSubject.next(patient));\n    }\n    connect(collectionViewer) {\n      return this.patientSubject.asObservable();\n    }\n    disconnect(collectionViewer) {\n      this.patientSubject.complete();\n    }\n  }\n  PatientDataService.ɵfac = function PatientDataService_Factory(t) {\n    return new (t || PatientDataService)(i0.ɵɵinject(i1.PatientService));\n  };\n  PatientDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PatientDataService,\n    factory: PatientDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return PatientDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}