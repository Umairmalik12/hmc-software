{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { openDB } from 'idb';\nimport * as i0 from \"@angular/core\";\nconst DB_NAME = 'MyAppDB';\nconst STORE_NAME = 'keyval';\nconst DB_VERSION = 1;\nexport let IndexedDbService = /*#__PURE__*/(() => {\n  class IndexedDbService {\n    constructor() {\n      this.dbPromise = this.initDB();\n    }\n    initDB() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield openDB(DB_NAME, DB_VERSION, {\n          upgrade(db) {\n            if (!db.objectStoreNames.contains(STORE_NAME)) {\n              db.createObjectStore(STORE_NAME);\n            }\n          }\n        });\n      });\n    }\n    setItem(key, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const db = yield this.dbPromise;\n        yield db.put(STORE_NAME, value, key);\n      });\n    }\n    getItem(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const db = yield this.dbPromise;\n        return yield db.get(STORE_NAME, key);\n      });\n    }\n    removeItem(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const db = yield this.dbPromise;\n        yield db.delete(STORE_NAME, key);\n      });\n    }\n    clear() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const db = yield this.dbPromise;\n        yield db.clear(STORE_NAME);\n      });\n    }\n  }\n  IndexedDbService.ɵfac = function IndexedDbService_Factory(t) {\n    return new (t || IndexedDbService)();\n  };\n  IndexedDbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IndexedDbService,\n    factory: IndexedDbService.ɵfac,\n    providedIn: 'root'\n  });\n  return IndexedDbService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}