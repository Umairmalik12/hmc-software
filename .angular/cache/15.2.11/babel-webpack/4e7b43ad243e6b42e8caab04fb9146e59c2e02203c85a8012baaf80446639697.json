{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let OpdService = /*#__PURE__*/(() => {\n  class OpdService {\n    constructor() {\n      this.total = 0;\n      this.opdDetail = [];\n      this.loadOpdData();\n    }\n    loadOpdData() {\n      const storedOpd = localStorage.getItem('opdDetails');\n      if (storedOpd) {\n        this.opdDetail = JSON.parse(storedOpd);\n      } else {\n        this.opdDetail = [];\n      }\n    }\n    savePatientOpdData() {\n      console.log(\"this.opdDetail\", this.opdDetail);\n      localStorage.setItem('opdDetails', JSON.stringify(this.opdDetail));\n    }\n    getAllOpd() {\n      let OpdList = this.getOpdBrief();\n      this.total = this.opdDetail.length;\n      return new Observable(obs => {\n        obs.next(OpdList);\n      });\n    }\n    findOpds(filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 5) {\n      this.total = this.opdDetail.length;\n      let opd = this.getOpdBrief();\n      let start = pageNumber * pageSize;\n      let n = start + pageSize;\n      let end = n < opd.length ? n : opd.length;\n      let temp = opd.slice(start, end);\n      return new Observable(obs => {\n        obs.next(temp);\n      });\n    }\n    getOpdDetails(id) {\n      return new Observable(obs => {\n        let temp = this.opdDetail.find(o => o.patientId == id);\n        obs.next(temp);\n      });\n    }\n    addNewOpd(data) {\n      try {\n        let id = this.opdDetail.length > 0 ? this.opdDetail[this.opdDetail.length - 1].patientId + 1 : 1;\n        data.patientId = id;\n        this.opdDetail.push(data);\n        this.savePatientOpdData();\n        return true;\n      } catch (e) {\n        console.error('Error adding new opd:', e);\n        return false;\n      }\n    }\n    updateOpd(data) {\n      try {\n        let i = this.opdDetail.findIndex(o => o.patientId == data.patientId);\n        if (i !== -1) {\n          this.opdDetail[i] = data;\n          console.log(\"this.opdDetail[i]\", this.opdDetail[i]);\n          this.savePatientOpdData();\n          return true;\n        }\n        return false;\n      } catch (e) {\n        console.error('Error updating patient:', e);\n        return false;\n      }\n    }\n    getOpdBrief() {\n      let opdList = [];\n      // Load patient data from localStorage if available\n      const storedOpd = localStorage.getItem('opdDetails');\n      const opds = storedOpd ? JSON.parse(storedOpd) : [];\n      console.log(\"opds\", opds);\n      opds.forEach(data => opdList.push({\n        patientId: data.patientId,\n        patientName: data.patientName,\n        phone: data.phone,\n        drName: data.drName,\n        sex: data.sex,\n        age: data.age,\n        bp: data.bp,\n        temp: data.temp,\n        weight: data.weight,\n        patientCategory: data.patientCategory,\n        address: data.address,\n        history: data.history,\n        amount: data.amount,\n        dateTime: data.dateTime,\n        followUp: data.followUp\n      }));\n      this.opdDetail = opds;\n      return opdList;\n    }\n    deleteOpd(id) {\n      try {\n        const index = this.opdDetail.findIndex(opd => opd.patientId === id);\n        if (index !== -1) {\n          // Remove the item from the list\n          this.opdDetail.splice(index, 1);\n          this.savePatientOpdData(); // Save updated data to localStorage\n          return true;\n        }\n        return false;\n      } catch (e) {\n        console.error('Error deleting opd:', e);\n        return false;\n      }\n    }\n  }\n  OpdService.ɵfac = function OpdService_Factory(t) {\n    return new (t || OpdService)();\n  };\n  OpdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OpdService,\n    factory: OpdService.ɵfac,\n    providedIn: 'root'\n  });\n  return OpdService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}