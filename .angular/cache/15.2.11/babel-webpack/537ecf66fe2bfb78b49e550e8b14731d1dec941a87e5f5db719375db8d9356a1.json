{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/Services/indexed-db.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/datepicker\";\nfunction LabEditComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Only alphabets are allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Phone number is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid phone number\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const test_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", test_r11.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(test_r11.viewValue);\n  }\n}\nfunction LabEditComponent_mat_error_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Test name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Price is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Doctor name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Only alphabets are allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LabEditComponent_mat_error_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Date & Time is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let LabEditComponent = /*#__PURE__*/(() => {\n  class LabEditComponent {\n    constructor(fb, dialogRef, labTestDetails, indexedDbService) {\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.indexedDbService = indexedDbService;\n      this.edit = false;\n      this.testList = [{\n        value: 'rpm',\n        viewValue: 'RPM'\n      }, {\n        value: 'hb',\n        viewValue: 'H/B'\n      }, {\n        value: 'cue',\n        viewValue: 'CUE'\n      }, {\n        value: 'rbs',\n        viewValue: 'RBS'\n      }, {\n        value: 'cbc',\n        viewValue: 'CBC'\n      }, {\n        value: 'se',\n        viewValue: 'S/E'\n      }, {\n        value: 'uric_acid',\n        viewValue: 'Uric Acid'\n      }, {\n        value: 'anti_hcv',\n        viewValue: 'Anti-HCV'\n      }, {\n        value: 'hbs_ag',\n        viewValue: 'HBS AG'\n      }, {\n        value: 'psa',\n        viewValue: 'PSA'\n      }, {\n        value: 'blood_group',\n        viewValue: 'Blood Group'\n      }, {\n        value: 'cross_match',\n        viewValue: 'Cross Match'\n      }, {\n        value: 'lfts',\n        viewValue: 'LFTs'\n      }, {\n        value: 'lipo_profile',\n        viewValue: 'Lipo-Profile'\n      }, {\n        value: 'xray',\n        viewValue: 'X-ray'\n      }];\n      this.isSuperAdmin = false;\n      this.labTestDetails = labTestDetails;\n      this.edit = !!(labTestDetails === null || labTestDetails === void 0 ? void 0 : labTestDetails.patientId);\n    }\n    ngOnInit() {\n      var _a, _b, _c, _d, _e, _f;\n      return __awaiter(this, void 0, void 0, function* () {\n        const draft = yield this.indexedDbService.getItem('labFormDraft');\n        const loginUser = yield this.indexedDbService.getItem('loginUser');\n        if (loginUser === 'admin') {\n          this.isSuperAdmin = true;\n        } else {\n          this.isSuperAdmin = false;\n        }\n        console.log(this.isSuperAdmin, \"isSuperAdmin\");\n        this.labPatientForm = this.fb.group({\n          patientId: [{\n            value: this.labTestDetails.patientId || (draft === null || draft === void 0 ? void 0 : draft.patientId) || Math.floor(100000 + Math.random() * 900000),\n            disabled: this.edit\n          }],\n          name: [((_a = this.labTestDetails) === null || _a === void 0 ? void 0 : _a.name) || (draft === null || draft === void 0 ? void 0 : draft.name) || '', [Validators.required, Validators.pattern('[a-zA-Z ]+')]],\n          phone: [((_b = this.labTestDetails) === null || _b === void 0 ? void 0 : _b.phone) || (draft === null || draft === void 0 ? void 0 : draft.phone) || '', [Validators.required, Validators.pattern('^[0-9]{10,15}$')]],\n          testName: [((_c = this.labTestDetails) === null || _c === void 0 ? void 0 : _c.testName) || (draft === null || draft === void 0 ? void 0 : draft.testName) || '', Validators.required],\n          price: [((_d = this.labTestDetails) === null || _d === void 0 ? void 0 : _d.price) || (draft === null || draft === void 0 ? void 0 : draft.price) || '', Validators.required],\n          suggestedDr: [((_e = this.labTestDetails) === null || _e === void 0 ? void 0 : _e.suggestedDr) || (draft === null || draft === void 0 ? void 0 : draft.suggestedDr) || '', [Validators.required, Validators.pattern('[a-zA-Z ]+')]],\n          dateTime: [((_f = this.labTestDetails) === null || _f === void 0 ? void 0 : _f.dateTime) ? formatDate(this.labTestDetails.dateTime, 'yyyy-MM-dd', 'en') : (draft === null || draft === void 0 ? void 0 : draft.dateTime) || '', Validators.required]\n        });\n        this.labPatientForm.valueChanges.subscribe(value => __awaiter(this, void 0, void 0, function* () {\n          var _g;\n          yield this.indexedDbService.setItem('labFormDraft', Object.assign(Object.assign({}, value), {\n            patientId: (_g = this.labPatientForm.get('patientId')) === null || _g === void 0 ? void 0 : _g.value\n          }));\n        }));\n      });\n    }\n    get c() {\n      return this.labPatientForm.controls;\n    }\n    onSubmit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.labPatientForm.valid) {\n          let choice = this.labPatientForm.dirty ? confirm('Submitting Patient Form') : true;\n          if (choice) {\n            this.labPatientForm.enable();\n            yield this.indexedDbService.removeItem('labFormDraft');\n            this.dialogRef.close(this.getFormattedLabPatientData());\n            window.location.reload();\n          }\n        }\n      });\n    }\n    close() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let choice = this.labPatientForm.dirty ? confirm('Closing Without Saving Changes') : true;\n        if (choice) {\n          this.dialogRef.close();\n        }\n      });\n    }\n    getFormattedLabPatientData() {\n      return {\n        patientId: this.c['patientId'].value,\n        name: this.c['name'].value,\n        phone: this.c['phone'].value,\n        testName: this.c['testName'].value,\n        price: this.c['price'].value,\n        suggestedDr: this.c['suggestedDr'].value,\n        dateTime: this.c['dateTime'].value\n      };\n    }\n  }\n  LabEditComponent.ɵfac = function LabEditComponent_Factory(t) {\n    return new (t || LabEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.IndexedDbService));\n  };\n  LabEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LabEditComponent,\n    selectors: [[\"app-lab-edit\"]],\n    decls: 51,\n    vars: 14,\n    consts: [[\"mat-dialog-title\", \"\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"outer-input-section\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"patientId\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"name\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"tel\", \"formControlName\", \"phone\"], [\"formControlName\", \"testName\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"price\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"suggestedDr\"], [\"matInput\", \"\", \"formControlName\", \"dateTime\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"type\", \"button\", 3, \"click\"], [3, \"value\"]],\n    template: function LabEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function LabEditComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"mat-dialog-content\")(4, \"div\", 2)(5, \"mat-form-field\", 3)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Patient ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵtemplate(13, LabEditComponent_mat_error_13_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(14, LabEditComponent_mat_error_14_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-form-field\", 3)(16, \"mat-label\");\n        i0.ɵɵtext(17, \"Phone Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 7);\n        i0.ɵɵtemplate(19, LabEditComponent_mat_error_19_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(20, LabEditComponent_mat_error_20_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-form-field\", 3)(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Test Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-select\", 8);\n        i0.ɵɵtemplate(25, LabEditComponent_mat_option_25_Template, 2, 2, \"mat-option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, LabEditComponent_mat_error_26_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-form-field\", 3)(28, \"mat-label\");\n        i0.ɵɵtext(29, \"Price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"input\", 10);\n        i0.ɵɵtemplate(31, LabEditComponent_mat_error_31_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"mat-form-field\", 3)(33, \"mat-label\");\n        i0.ɵɵtext(34, \"Suggested Doctor Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 11);\n        i0.ɵɵtemplate(36, LabEditComponent_mat_error_36_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(37, LabEditComponent_mat_error_37_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"mat-form-field\", 3)(39, \"mat-label\");\n        i0.ɵɵtext(40, \"Date & Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"input\", 12)(42, \"mat-datepicker-toggle\", 13)(43, \"mat-datepicker\", null, 14);\n        i0.ɵɵtemplate(45, LabEditComponent_mat_error_45_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"mat-dialog-actions\")(47, \"button\", 15);\n        i0.ɵɵtext(48, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function LabEditComponent_Template_button_click_49_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtext(50, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        const _r9 = i0.ɵɵreference(44);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.edit ? \"Update Lab Patient Data\" : \"Add New Lab Patient\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.labPatientForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.name.errors == null ? null : ctx.c.name.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.name.errors == null ? null : ctx.c.name.errors.pattern);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.phone.errors == null ? null : ctx.c.phone.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.phone.errors == null ? null : ctx.c.phone.errors.pattern);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.testList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.testName.errors == null ? null : ctx.c.testName.errors.required);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.price.errors == null ? null : ctx.c.price.errors.required);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.suggestedDr.errors == null ? null : ctx.c.suggestedDr.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.suggestedDr.errors == null ? null : ctx.c.suggestedDr.errors.pattern);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matDatepicker\", _r9);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r9);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.c.dateTime.errors == null ? null : ctx.c.dateTime.errors.required);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.MatButton, i6.MatFormField, i6.MatLabel, i6.MatError, i6.MatSuffix, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i7.MatInput, i8.MatSelect, i9.MatOption, i2.MatDialogTitle, i2.MatDialogContent, i2.MatDialogActions, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle],\n    styles: [\".outer-input-section[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:sp;margin:5px 0;flex-wrap:wrap}.input-section[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;margin:5px 0;flex-wrap:wrap}.input-section[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{flex-grow:1;margin:0 20px}.title[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:flex-start;margin-bottom:10px;font-size:20px;font-weight:500}.radio-group[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:last-child){margin-right:5px;margin-bottom:10px}\"]\n  });\n  return LabEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}