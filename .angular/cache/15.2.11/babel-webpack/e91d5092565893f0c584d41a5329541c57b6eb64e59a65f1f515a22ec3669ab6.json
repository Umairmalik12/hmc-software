{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let PatientService = /*#__PURE__*/(() => {\n  class PatientService {\n    constructor() {\n      this.total = 0;\n      this.patientDetail = [];\n      // On initialization, load data from localStorage\n      this.loadPatientData();\n    }\n    // Method to load data from localStorage\n    loadPatientData() {\n      const storedPatients = localStorage.getItem('patientDetails');\n      if (storedPatients) {\n        this.patientDetail = JSON.parse(storedPatients);\n      } else {\n        this.patientDetail = []; // Fallback if nothing is in localStorage\n      }\n    }\n    // Method to save data to localStorage\n    savePatientData() {\n      localStorage.setItem('patientDetails', JSON.stringify(this.patientDetail));\n    }\n    getAllPatient() {\n      let patientList = this.getPatientBrief();\n      this.total = this.patientDetail.length;\n      return new Observable(obs => {\n        obs.next(patientList);\n      });\n    }\n    findPatients(filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 5) {\n      this.total = this.patientDetail.length;\n      let patient = this.getPatientBrief();\n      let start = pageNumber * pageSize;\n      let n = start + pageSize;\n      let end = n < patient.length ? n : patient.length;\n      let temp = patient.slice(start, end);\n      return new Observable(obs => {\n        obs.next(temp);\n      });\n    }\n    getPatientDetails(id) {\n      return new Observable(obs => {\n        let temp = this.patientDetail.find(o => o.patientId == id);\n        obs.next(temp);\n      });\n    }\n    addNewPatient(data) {\n      try {\n        // Generate a new patient ID\n        let id = this.patientDetail.length > 0 ? this.patientDetail[this.patientDetail.length - 1].patientId + 1 : 1;\n        data.patientId = id;\n        // Add the new patient to the list\n        this.patientDetail.push(data);\n        // Save the updated list to localStorage\n        this.savePatientData();\n        return true;\n      } catch (e) {\n        console.error('Error adding new patient:', e);\n        return false;\n      }\n    }\n    updatePatient(data) {\n      try {\n        let i = this.patientDetail.findIndex(o => o.patientId == data.patientId);\n        if (i !== -1) {\n          this.patientDetail[i] = data;\n          this.savePatientData();\n          return true;\n        }\n        return false;\n      } catch (e) {\n        console.error('Error updating patient:', e);\n        return false;\n      }\n    }\n    getPatientBrief() {\n      let patientList = [];\n      // Load patient data from localStorage if available\n      const storedPatients = localStorage.getItem('patientDetails');\n      const patients = storedPatients ? JSON.parse(storedPatients) : [];\n      patients.forEach(data => patientList.push({\n        patientId: data.patientId,\n        name: data.firstName + \" \" + data.lastName,\n        contact: data.phone,\n        drName: data.drName,\n        gender: data.gender,\n        age: data.age,\n        maritalStatus: data.maritalStatus,\n        dob: data.dob,\n        email: data.email,\n        state: data.state,\n        address: data.address\n      }));\n      // Update patientDetail array after loading data\n      this.patientDetail = patients;\n      return patientList;\n    }\n  }\n  PatientService.ɵfac = function PatientService_Factory(t) {\n    return new (t || PatientService)();\n  };\n  PatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PatientService,\n    factory: PatientService.ɵfac,\n    providedIn: 'root'\n  });\n  return PatientService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}