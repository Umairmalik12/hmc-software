{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./indexed-db.service\";\nconst STORAGE_KEY = 'patientDetails';\nexport let PatientService = /*#__PURE__*/(() => {\n  class PatientService {\n    constructor(indexedDb) {\n      this.indexedDb = indexedDb;\n      this.total = 0;\n      this.patientDetail = [];\n      this.loadPatientData();\n    }\n    loadPatientData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const storedPatients = yield this.indexedDb.getItem(STORAGE_KEY);\n        this.patientDetail = storedPatients || [];\n      });\n    }\n    savePatientData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.indexedDb.setItem(STORAGE_KEY, this.patientDetail);\n      });\n    }\n    getAllPatient() {\n      return new Observable(observer => {\n        this.indexedDb.getItem(STORAGE_KEY).then(data => {\n          const patients = data || [];\n          this.patientDetail = patients;\n          this.total = patients.length;\n          observer.next(this.getPatientBrief(patients));\n          observer.complete();\n        });\n      });\n    }\n    findPatients(filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 5) {\n      return new Observable(observer => {\n        this.indexedDb.getItem(STORAGE_KEY).then(data => {\n          const patients = data || [];\n          this.patientDetail = patients;\n          this.total = patients.length;\n          const all = this.getPatientBrief(patients);\n          const start = pageNumber * pageSize;\n          const end = Math.min(start + pageSize, all.length);\n          observer.next(all.slice(start, end));\n          observer.complete();\n        });\n      });\n    }\n    getPatientDetails(id) {\n      return new Observable(observer => {\n        this.indexedDb.getItem(STORAGE_KEY).then(data => {\n          const patient = (data || []).find(p => p.patientId === id);\n          observer.next(patient);\n          observer.complete();\n        });\n      });\n    }\n    addNewPatient(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const storedPatients = (yield this.indexedDb.getItem(STORAGE_KEY)) || [];\n          const id = storedPatients.length > 0 ? storedPatients[storedPatients.length - 1].patientId + 1 : 1;\n          data.patientId = id;\n          storedPatients.push(data);\n          yield this.indexedDb.setItem(STORAGE_KEY, storedPatients);\n          this.patientDetail = storedPatients;\n          return true;\n        } catch (e) {\n          console.error('Error adding new patient:', e);\n          return false;\n        }\n      });\n    }\n    updatePatient(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const storedPatients = (yield this.indexedDb.getItem(STORAGE_KEY)) || [];\n          const index = storedPatients.findIndex(p => p.patientId === data.patientId);\n          if (index !== -1) {\n            storedPatients[index] = data;\n            yield this.indexedDb.setItem(STORAGE_KEY, storedPatients);\n            this.patientDetail = storedPatients;\n            return true;\n          }\n          return false;\n        } catch (e) {\n          console.error('Error updating patient:', e);\n          return false;\n        }\n      });\n    }\n    getPatientBrief(patients) {\n      return patients.map(p => ({\n        patientId: p.patientId,\n        name: `${p.firstName} ${p.lastName}`,\n        contact: p.phone,\n        drName: p.drName,\n        gender: p.gender,\n        age: p.age,\n        maritalStatus: p.maritalStatus,\n        dob: p.dob,\n        email: p.email,\n        state: p.state,\n        address: p.address\n      }));\n    }\n    deletePatient(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const storedPatients = (yield this.indexedDb.getItem(STORAGE_KEY)) || [];\n          const updatedPatients = storedPatients.filter(p => p.patientId !== id);\n          if (updatedPatients.length === storedPatients.length) {\n            return false;\n          }\n          yield this.indexedDb.setItem(STORAGE_KEY, updatedPatients);\n          this.patientDetail = updatedPatients;\n          return true;\n        } catch (e) {\n          console.error('Error deleting patient:', e);\n          return false;\n        }\n      });\n    }\n  }\n  PatientService.ɵfac = function PatientService_Factory(t) {\n    return new (t || PatientService)(i0.ɵɵinject(i1.IndexedDbService));\n  };\n  PatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PatientService,\n    factory: PatientService.ɵfac,\n    providedIn: 'root'\n  });\n  return PatientService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}